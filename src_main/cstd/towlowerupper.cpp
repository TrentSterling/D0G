/* Copyright (c) 2013 SiPlus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

#include <cstd/wchar.h>

typedef struct
{
	wchar_t start;
	wchar_t length;
	const wchar_t *remap;
} d0g_towlu_range;

// UCS-2 level-1 mapping tables. Placed in descending order by probability
// and alphabetically. Languages without Source localization are placed last.
// Basic Latin is not included because ANSI characters are handles specially.

#define D0G_TOWLOWER_RANGES 11
// Latin
#define D0G_TOWLOWER_RANGE_0_START 192
#define D0G_TOWLOWER_RANGE_0_LENGTH 31
const wchar_t d0g_towlower_range0[] = {
	224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 215, 248, 249, 250, 251, 252, 253, 254
};
// Latin
#define D0G_TOWLOWER_RANGE_1_START 256
#define D0G_TOWLOWER_RANGE_1_LENGTH 279
const wchar_t d0g_towlower_range1[] = {
	257, 257, 259, 259, 261, 261, 263, 263, 265, 265, 267, 267, 269, 269, 271, 271,
	273, 273, 275, 275, 277, 277, 279, 279, 281, 281, 283, 283, 285, 285, 287, 287,
	289, 289, 291, 291, 293, 293, 295, 295, 297, 297, 299, 299, 301, 301, 303, 303,
	105, 305, 307, 307, 309, 309, 311, 311, 312, 314, 314, 316, 316, 318, 318, 320,
	320, 322, 322, 324, 324, 326, 326, 328, 328, 329, 331, 331, 333, 333, 335, 335,
	337, 337, 339, 339, 341, 341, 343, 343, 345, 345, 347, 347, 349, 349, 351, 351,
	353, 353, 355, 355, 357, 357, 359, 359, 361, 361, 363, 363, 365, 365, 367, 367,
	369, 369, 371, 371, 373, 373, 375, 375, 255, 378, 378, 380, 380, 382, 382, 383,
	384, 595, 387, 387, 389, 389, 596, 392, 392, 393, 599, 396, 396, 397, 600, 601,
	603, 402, 402, 608, 611, 405, 617, 616, 409, 409, 410, 411, 623, 626, 414, 629,
	417, 417, 419, 419, 421, 421, 422, 424, 424, 643, 426, 427, 429, 429, 648, 432,
	432, 650, 651, 436, 436, 438, 438, 658, 441, 441, 442, 443, 445, 445, 446, 447,
	448, 449, 450, 451, 454, 454, 454, 457, 457, 457, 460, 460, 460, 462, 462, 464,
	464, 466, 466, 468, 468, 470, 470, 472, 472, 474, 474, 476, 476, 477, 479, 479,
	481, 481, 483, 483, 485, 485, 487, 487, 489, 489, 491, 491, 493, 493, 495, 495,
	496, 499, 498, 499, 501, 501, 502, 503, 504, 505, 507, 507, 509, 509, 511, 511,
	513, 513, 515, 515, 517, 517, 519, 519, 521, 521, 523, 523, 525, 525, 527, 527,
	529, 529, 531, 531, 533, 533, 535
};
// Latin, Greek
#define D0G_TOWLOWER_RANGE_2_START 7680
#define D0G_TOWLOWER_RANGE_2_LENGTH 490
const wchar_t d0g_towlower_range2[] = {
	7681, 7681, 7683, 7683, 7685, 7685, 7687, 7687, 7689, 7689, 7691, 7691, 7693, 7693, 7695, 7695,
	7697, 7697, 7699, 7699, 7701, 7701, 7703, 7703, 7705, 7705, 7707, 7707, 7709, 7709, 7711, 7711,
	7713, 7713, 7715, 7715, 7717, 7717, 7719, 7719, 7721, 7721, 7723, 7723, 7725, 7725, 7727, 7727,
	7729, 7729, 7731, 7731, 7733, 7733, 7735, 7735, 7737, 7737, 7739, 7739, 7741, 7741, 7743, 7743,
	7745, 7745, 7747, 7747, 7749, 7749, 7751, 7751, 7753, 7753, 7755, 7755, 7757, 7757, 7759, 7759,
	7761, 7761, 7763, 7763, 7765, 7765, 7767, 7767, 7769, 7769, 7771, 7771, 7773, 7773, 7775, 7775,
	7777, 7777, 7779, 7779, 7781, 7781, 7783, 7783, 7785, 7785, 7787, 7787, 7789, 7789, 7791, 7791,
	7793, 7793, 7795, 7795, 7797, 7797, 7799, 7799, 7801, 7801, 7803, 7803, 7805, 7805, 7807, 7807,
	7809, 7809, 7811, 7811, 7813, 7813, 7815, 7815, 7817, 7817, 7819, 7819, 7821, 7821, 7823, 7823,
	7825, 7825, 7827, 7827, 7829, 7829, 7830, 7831, 7832, 7833, 7834, 7835, 7836, 7837, 7838, 7839,
	7841, 7841, 7843, 7843, 7845, 7845, 7847, 7847, 7849, 7849, 7851, 7851, 7853, 7853, 7855, 7855,
	7857, 7857, 7859, 7859, 7861, 7861, 7863, 7863, 7865, 7865, 7867, 7867, 7869, 7869, 7871, 7871,
	7873, 7873, 7875, 7875, 7877, 7877, 7879, 7879, 7881, 7881, 7883, 7883, 7885, 7885, 7887, 7887,
	7889, 7889, 7891, 7891, 7893, 7893, 7895, 7895, 7897, 7897, 7899, 7899, 7901, 7901, 7903, 7903,
	7905, 7905, 7907, 7907, 7909, 7909, 7911, 7911, 7913, 7913, 7915, 7915, 7917, 7917, 7919, 7919,
	7921, 7921, 7923, 7923, 7925, 7925, 7927, 7927, 7929, 7929, 7930, 7931, 7932, 7933, 7934, 7935,
	7936, 7937, 7938, 7939, 7940, 7941, 7942, 7943, 7936, 7937, 7938, 7939, 7940, 7941, 7942, 7943,
	7952, 7953, 7954, 7955, 7956, 7957, 7958, 7959, 7952, 7953, 7954, 7955, 7956, 7957, 7966, 7967,
	7968, 7969, 7970, 7971, 7972, 7973, 7974, 7975, 7968, 7969, 7970, 7971, 7972, 7973, 7974, 7975,
	7984, 7985, 7986, 7987, 7988, 7989, 7990, 7991, 7984, 7985, 7986, 7987, 7988, 7989, 7990, 7991,
	8000, 8001, 8002, 8003, 8004, 8005, 8006, 8007, 8000, 8001, 8002, 8003, 8004, 8005, 8014, 8015,
	8016, 8017, 8018, 8019, 8020, 8021, 8022, 8023, 8024, 8017, 8026, 8019, 8028, 8021, 8030, 8023,
	8032, 8033, 8034, 8035, 8036, 8037, 8038, 8039, 8032, 8033, 8034, 8035, 8036, 8037, 8038, 8039,
	8048, 8049, 8050, 8051, 8052, 8053, 8054, 8055, 8056, 8057, 8058, 8059, 8060, 8061, 8062, 8063,
	8064, 8065, 8066, 8067, 8068, 8069, 8070, 8071, 8064, 8065, 8066, 8067, 8068, 8069, 8070, 8071,
	8080, 8081, 8082, 8083, 8084, 8085, 8086, 8087, 8080, 8081, 8082, 8083, 8084, 8085, 8086, 8087,
	8096, 8097, 8098, 8099, 8100, 8101, 8102, 8103, 8096, 8097, 8098, 8099, 8100, 8101, 8102, 8103,
	8112, 8113, 8114, 8115, 8116, 8117, 8118, 8119, 8112, 8113, 8122, 8123, 8124, 8125, 8126, 8127,
	8128, 8129, 8130, 8131, 8132, 8133, 8134, 8135, 8136, 8137, 8138, 8139, 8140, 8141, 8142, 8143,
	8144, 8145, 8146, 8147, 8148, 8149, 8150, 8151, 8144, 8145, 8154, 8155, 8156, 8157, 8158, 8159,
	8160, 8161, 8162, 8163, 8164, 8165, 8166, 8167, 8160, 8161
};
// Cyrillic
#define D0G_TOWLOWER_RANGE_3_START 1025
#define D0G_TOWLOWER_RANGE_3_LENGTH 47
const wchar_t d0g_towlower_range3[] = {
	1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1037, 1118, 1119, 1072,
	1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088,
	1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103
};
// Cyrillic
#define D0G_TOWLOWER_RANGE_4_START 1120
#define D0G_TOWLOWER_RANGE_4_LENGTH 153
const wchar_t d0g_towlower_range4[] = {
	1121, 1121, 1123, 1123, 1125, 1125, 1127, 1127, 1129, 1129, 1131, 1131, 1133, 1133, 1135, 1135,
	1137, 1137, 1139, 1139, 1141, 1141, 1143, 1143, 1145, 1145, 1147, 1147, 1149, 1149, 1151, 1151,
	1153, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167,
	1169, 1169, 1171, 1171, 1173, 1173, 1175, 1175, 1177, 1177, 1179, 1179, 1181, 1181, 1183, 1183,
	1185, 1185, 1187, 1187, 1189, 1189, 1191, 1191, 1193, 1193, 1195, 1195, 1197, 1197, 1199, 1199,
	1201, 1201, 1203, 1203, 1205, 1205, 1207, 1207, 1209, 1209, 1211, 1211, 1213, 1213, 1215, 1215,
	1216, 1218, 1218, 1220, 1220, 1221, 1222, 1224, 1224, 1225, 1226, 1228, 1228, 1229, 1230, 1231,
	1233, 1233, 1235, 1235, 1237, 1237, 1239, 1239, 1241, 1241, 1243, 1243, 1245, 1245, 1247, 1247,
	1249, 1249, 1251, 1251, 1253, 1253, 1255, 1255, 1257, 1257, 1259, 1259, 1260, 1261, 1263, 1263,
	1265, 1265, 1267, 1267, 1269, 1269, 1270, 1271, 1273
};
// Greek
#define D0G_TOWLOWER_RANGE_5_START 902
#define D0G_TOWLOWER_RANGE_5_LENGTH 38
const wchar_t d0g_towlower_range5[] = {
	940, 903, 941, 942, 943, 907, 972, 909, 973, 974, 912, 945, 946, 947, 948, 949,
	950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 930, 963, 964, 965,
	966, 967, 968, 969, 970, 971
};
// Armenian
#define D0G_TOWLOWER_RANGE_6_START 1329
#define D0G_TOWLOWER_RANGE_6_LENGTH 38
const wchar_t d0g_towlower_range6[] = {
	1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392,
	1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408,
	1409, 1410, 1411, 1412, 1413, 1414
};
// Georgian
#define D0G_TOWLOWER_RANGE_7_START 4256
#define D0G_TOWLOWER_RANGE_7_LENGTH 38
const wchar_t d0g_towlower_range7[] = {
	4304, 4305, 4306, 4307, 4308, 4309, 4310, 4311, 4312, 4313, 4314, 4315, 4316, 4317, 4318, 4319,
	4320, 4321, 4322, 4323, 4324, 4325, 4326, 4327, 4328, 4329, 4330, 4331, 4332, 4333, 4334, 4335,
	4336, 4337, 4338, 4339, 4340, 4341
};
// Circled Latin
#define D0G_TOWLOWER_RANGE_8_START 9398
#define D0G_TOWLOWER_RANGE_8_LENGTH 26
const wchar_t d0g_towlower_range8[] = {
	9424, 9425, 9426, 9427, 9428, 9429, 9430, 9431, 9432, 9433, 9434, 9435, 9436, 9437, 9438, 9439,
	9440, 9441, 9442, 9443, 9444, 9445, 9446, 9447, 9448, 9449
};
// Fullwidth Latin
#define D0G_TOWLOWER_RANGE_9_START 65313
#define D0G_TOWLOWER_RANGE_9_LENGTH 26
const wchar_t d0g_towlower_range9[] = {
	65345, 65346, 65347, 65348, 65349, 65350, 65351, 65352, 65353, 65354, 65355, 65356, 65357, 65358, 65359, 65360,
	65361, 65362, 65363, 65364, 65365, 65366, 65367, 65368, 65369, 65370
};
// Coptic
#define D0G_TOWLOWER_RANGE_10_START 994
#define D0G_TOWLOWER_RANGE_10_LENGTH 13
const wchar_t d0g_towlower_range10[] = {
	995, 995, 997, 997, 999, 999, 1001, 1001, 1003, 1003, 1005, 1005, 1007
};
const d0g_towlu_range d0g_towlower_ranges[D0G_TOWLOWER_RANGES] = {
	{D0G_TOWLOWER_RANGE_0_START, D0G_TOWLOWER_RANGE_0_LENGTH, d0g_towlower_range0},
	{D0G_TOWLOWER_RANGE_1_START, D0G_TOWLOWER_RANGE_1_LENGTH, d0g_towlower_range1},
	{D0G_TOWLOWER_RANGE_2_START, D0G_TOWLOWER_RANGE_2_LENGTH, d0g_towlower_range2},
	{D0G_TOWLOWER_RANGE_3_START, D0G_TOWLOWER_RANGE_3_LENGTH, d0g_towlower_range3},
	{D0G_TOWLOWER_RANGE_4_START, D0G_TOWLOWER_RANGE_4_LENGTH, d0g_towlower_range4},
	{D0G_TOWLOWER_RANGE_5_START, D0G_TOWLOWER_RANGE_5_LENGTH, d0g_towlower_range5},
	{D0G_TOWLOWER_RANGE_6_START, D0G_TOWLOWER_RANGE_6_LENGTH, d0g_towlower_range6},
	{D0G_TOWLOWER_RANGE_7_START, D0G_TOWLOWER_RANGE_7_LENGTH, d0g_towlower_range7},
	{D0G_TOWLOWER_RANGE_8_START, D0G_TOWLOWER_RANGE_8_LENGTH, d0g_towlower_range8},
	{D0G_TOWLOWER_RANGE_9_START, D0G_TOWLOWER_RANGE_9_LENGTH, d0g_towlower_range9},
	{D0G_TOWLOWER_RANGE_10_START, D0G_TOWLOWER_RANGE_10_LENGTH, d0g_towlower_range10}
};

#define D0G_TOWUPPER_RANGES 10
// Latin
#define D0G_TOWUPPER_RANGE_0_START 224
#define D0G_TOWUPPER_RANGE_0_LENGTH 312
const wchar_t d0g_towupper_range0[] = {
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
	208, 209, 210, 211, 212, 213, 214, 247, 216, 217, 218, 219, 220, 221, 222, 376,
	256, 256, 258, 258, 260, 260, 262, 262, 264, 264, 266, 266, 268, 268, 270, 270,
	272, 272, 274, 274, 276, 276, 278, 278, 280, 280, 282, 282, 284, 284, 286, 286,
	288, 288, 290, 290, 292, 292, 294, 294, 296, 296, 298, 298, 300, 300, 302, 302,
	304, 73, 306, 306, 308, 308, 310, 310, 312, 313, 313, 315, 315, 317, 317, 319,
	319, 321, 321, 323, 323, 325, 325, 327, 327, 329, 330, 330, 332, 332, 334, 334,
	336, 336, 338, 338, 340, 340, 342, 342, 344, 344, 346, 346, 348, 348, 350, 350,
	352, 352, 354, 354, 356, 356, 358, 358, 360, 360, 362, 362, 364, 364, 366, 366,
	368, 368, 370, 370, 372, 372, 374, 374, 376, 377, 377, 379, 379, 381, 381, 383,
	384, 385, 386, 386, 388, 388, 390, 391, 391, 393, 394, 395, 395, 397, 398, 399,
	400, 401, 401, 403, 404, 405, 406, 407, 408, 408, 410, 411, 412, 413, 414, 415,
	416, 416, 418, 418, 420, 420, 422, 423, 423, 425, 426, 427, 428, 428, 430, 431,
	431, 433, 434, 435, 435, 437, 437, 439, 440, 440, 442, 443, 444, 444, 446, 447,
	448, 449, 450, 451, 452, 453, 452, 455, 456, 455, 458, 459, 458, 461, 461, 463,
	463, 465, 465, 467, 467, 469, 469, 471, 471, 473, 473, 475, 475, 477, 478, 478,
	480, 480, 482, 482, 484, 484, 486, 486, 488, 488, 490, 490, 492, 492, 494, 494,
	496, 497, 498, 497, 500, 500, 502, 503, 504, 505, 506, 506, 508, 508, 510, 510,
	512, 512, 514, 514, 516, 516, 518, 518, 520, 520, 522, 522, 524, 524, 526, 526,
	528, 528, 530, 530, 532, 532, 534, 534
};
// Latin
#define D0G_TOWUPPER_RANGE_1_START 595
#define D0G_TOWUPPER_RANGE_1_LENGTH 64
const wchar_t d0g_towupper_range1[] = {
	385, 390, 597, 598, 394, 398, 399, 602, 400, 604, 605, 606, 607, 403, 609, 610,
	404, 612, 613, 614, 615, 407, 406, 618, 619, 620, 621, 622, 412, 624, 625, 413,
	627, 628, 415, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642,
	425, 644, 645, 646, 647, 430, 649, 433, 434, 652, 653, 654, 655, 656, 657, 439
};
// Latin, Greek
#define D0G_TOWUPPER_RANGE_2_START 7681
#define D0G_TOWUPPER_RANGE_2_LENGTH 481
const wchar_t d0g_towupper_range2[] = {
	7680, 7682, 7682, 7684, 7684, 7686, 7686, 7688, 7688, 7690, 7690, 7692, 7692, 7694, 7694, 7696,
	7696, 7698, 7698, 7700, 7700, 7702, 7702, 7704, 7704, 7706, 7706, 7708, 7708, 7710, 7710, 7712,
	7712, 7714, 7714, 7716, 7716, 7718, 7718, 7720, 7720, 7722, 7722, 7724, 7724, 7726, 7726, 7728,
	7728, 7730, 7730, 7732, 7732, 7734, 7734, 7736, 7736, 7738, 7738, 7740, 7740, 7742, 7742, 7744,
	7744, 7746, 7746, 7748, 7748, 7750, 7750, 7752, 7752, 7754, 7754, 7756, 7756, 7758, 7758, 7760,
	7760, 7762, 7762, 7764, 7764, 7766, 7766, 7768, 7768, 7770, 7770, 7772, 7772, 7774, 7774, 7776,
	7776, 7778, 7778, 7780, 7780, 7782, 7782, 7784, 7784, 7786, 7786, 7788, 7788, 7790, 7790, 7792,
	7792, 7794, 7794, 7796, 7796, 7798, 7798, 7800, 7800, 7802, 7802, 7804, 7804, 7806, 7806, 7808,
	7808, 7810, 7810, 7812, 7812, 7814, 7814, 7816, 7816, 7818, 7818, 7820, 7820, 7822, 7822, 7824,
	7824, 7826, 7826, 7828, 7828, 7830, 7831, 7832, 7833, 7834, 7835, 7836, 7837, 7838, 7839, 7840,
	7840, 7842, 7842, 7844, 7844, 7846, 7846, 7848, 7848, 7850, 7850, 7852, 7852, 7854, 7854, 7856,
	7856, 7858, 7858, 7860, 7860, 7862, 7862, 7864, 7864, 7866, 7866, 7868, 7868, 7870, 7870, 7872,
	7872, 7874, 7874, 7876, 7876, 7878, 7878, 7880, 7880, 7882, 7882, 7884, 7884, 7886, 7886, 7888,
	7888, 7890, 7890, 7892, 7892, 7894, 7894, 7896, 7896, 7898, 7898, 7900, 7900, 7902, 7902, 7904,
	7904, 7906, 7906, 7908, 7908, 7910, 7910, 7912, 7912, 7914, 7914, 7916, 7916, 7918, 7918, 7920,
	7920, 7922, 7922, 7924, 7924, 7926, 7926, 7928, 7928, 7930, 7931, 7932, 7933, 7934, 7935, 7944,
	7945, 7946, 7947, 7948, 7949, 7950, 7951, 7944, 7945, 7946, 7947, 7948, 7949, 7950, 7951, 7960,
	7961, 7962, 7963, 7964, 7965, 7958, 7959, 7960, 7961, 7962, 7963, 7964, 7965, 7966, 7967, 7976,
	7977, 7978, 7979, 7980, 7981, 7982, 7983, 7976, 7977, 7978, 7979, 7980, 7981, 7982, 7983, 7992,
	7993, 7994, 7995, 7996, 7997, 7998, 7999, 7992, 7993, 7994, 7995, 7996, 7997, 7998, 7999, 8008,
	8009, 8010, 8011, 8012, 8013, 8006, 8007, 8008, 8009, 8010, 8011, 8012, 8013, 8014, 8015, 8016,
	8025, 8018, 8027, 8020, 8029, 8022, 8031, 8024, 8025, 8026, 8027, 8028, 8029, 8030, 8031, 8040,
	8041, 8042, 8043, 8044, 8045, 8046, 8047, 8040, 8041, 8042, 8043, 8044, 8045, 8046, 8047, 8048,
	8049, 8050, 8051, 8052, 8053, 8054, 8055, 8056, 8057, 8058, 8059, 8060, 8061, 8062, 8063, 8072,
	8073, 8074, 8075, 8076, 8077, 8078, 8079, 8072, 8073, 8074, 8075, 8076, 8077, 8078, 8079, 8088,
	8089, 8090, 8091, 8092, 8093, 8094, 8095, 8088, 8089, 8090, 8091, 8092, 8093, 8094, 8095, 8104,
	8105, 8106, 8107, 8108, 8109, 8110, 8111, 8104, 8105, 8106, 8107, 8108, 8109, 8110, 8111, 8120,
	8121, 8114, 8115, 8116, 8117, 8118, 8119, 8120, 8121, 8122, 8123, 8124, 8125, 8126, 8127, 8128,
	8129, 8130, 8131, 8132, 8133, 8134, 8135, 8136, 8137, 8138, 8139, 8140, 8141, 8142, 8143, 8152,
	8153, 8146, 8147, 8148, 8149, 8150, 8151, 8152, 8153, 8154, 8155, 8156, 8157, 8158, 8159, 8168,
	8169
};
// Cyrillic
#define D0G_TOWUPPER_RANGE_3_START 1072
#define D0G_TOWUPPER_RANGE_3_LENGTH 202
const wchar_t d0g_towupper_range3[] = {
	1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
	1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
	1104, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1117, 1038, 1039,
	1120, 1120, 1122, 1122, 1124, 1124, 1126, 1126, 1128, 1128, 1130, 1130, 1132, 1132, 1134, 1134,
	1136, 1136, 1138, 1138, 1140, 1140, 1142, 1142, 1144, 1144, 1146, 1146, 1148, 1148, 1150, 1150,
	1152, 1152, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167,
	1168, 1168, 1170, 1170, 1172, 1172, 1174, 1174, 1176, 1176, 1178, 1178, 1180, 1180, 1182, 1182,
	1184, 1184, 1186, 1186, 1188, 1188, 1190, 1190, 1192, 1192, 1194, 1194, 1196, 1196, 1198, 1198,
	1200, 1200, 1202, 1202, 1204, 1204, 1206, 1206, 1208, 1208, 1210, 1210, 1212, 1212, 1214, 1214,
	1216, 1217, 1217, 1219, 1219, 1221, 1222, 1223, 1223, 1225, 1226, 1227, 1227, 1229, 1230, 1231,
	1232, 1232, 1234, 1234, 1236, 1236, 1238, 1238, 1240, 1240, 1242, 1242, 1244, 1244, 1246, 1246,
	1248, 1248, 1250, 1250, 1252, 1252, 1254, 1254, 1256, 1256, 1258, 1258, 1260, 1261, 1262, 1262,
	1264, 1264, 1266, 1266, 1268, 1268, 1270, 1271, 1272, 1272
};
// Greek
#define D0G_TOWUPPER_RANGE_4_START 940
#define D0G_TOWUPPER_RANGE_4_LENGTH 35
const wchar_t d0g_towupper_range4[] = {
	902, 904, 905, 906, 944, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
	924, 925, 926, 927, 928, 929, 962, 931, 932, 933, 934, 935, 936, 937, 938, 939,
	908, 910, 911
};
// Armenian
#define D0G_TOWUPPER_RANGE_5_START 1377
#define D0G_TOWUPPER_RANGE_5_LENGTH 38
const wchar_t d0g_towupper_range5[] = {
	1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344,
	1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360,
	1361, 1362, 1363, 1364, 1365, 1366
};
// Georgian
#define D0G_TOWUPPER_RANGE_6_START 4304
#define D0G_TOWUPPER_RANGE_6_LENGTH 38
const wchar_t d0g_towupper_range6[] = {
	4256, 4257, 4258, 4259, 4260, 4261, 4262, 4263, 4264, 4265, 4266, 4267, 4268, 4269, 4270, 4271,
	4272, 4273, 4274, 4275, 4276, 4277, 4278, 4279, 4280, 4281, 4282, 4283, 4284, 4285, 4286, 4287,
	4288, 4289, 4290, 4291, 4292, 4293
};
// Circled Latin
#define D0G_TOWUPPER_RANGE_7_START 9424
#define D0G_TOWUPPER_RANGE_7_LENGTH 26
const wchar_t d0g_towupper_range7[] = {
	9398, 9399, 9400, 9401, 9402, 9403, 9404, 9405, 9406, 9407, 9408, 9409, 9410, 9411, 9412, 9413,
	9414, 9415, 9416, 9417, 9418, 9419, 9420, 9421, 9422, 9423
};
// Fullwidth Latin
#define D0G_TOWUPPER_RANGE_8_START 65345
#define D0G_TOWUPPER_RANGE_8_LENGTH 26
const wchar_t d0g_towupper_range8[] = {
	65313, 65314, 65315, 65316, 65317, 65318, 65319, 65320, 65321, 65322, 65323, 65324, 65325, 65326, 65327, 65328,
	65329, 65330, 65331, 65332, 65333, 65334, 65335, 65336, 65337, 65338
};
// Coptic
#define D0G_TOWUPPER_RANGE_9_START 995
#define D0G_TOWUPPER_RANGE_9_LENGTH 13
const wchar_t d0g_towupper_range9[] = {
	994, 996, 996, 998, 998, 1000, 1000, 1002, 1002, 1004, 1004, 1006, 1006
};
const d0g_towlu_range d0g_towupper_ranges[D0G_TOWUPPER_RANGES] = {
	{D0G_TOWUPPER_RANGE_0_START, D0G_TOWUPPER_RANGE_0_LENGTH, d0g_towupper_range0},
	{D0G_TOWUPPER_RANGE_1_START, D0G_TOWUPPER_RANGE_1_LENGTH, d0g_towupper_range1},
	{D0G_TOWUPPER_RANGE_2_START, D0G_TOWUPPER_RANGE_2_LENGTH, d0g_towupper_range2},
	{D0G_TOWUPPER_RANGE_3_START, D0G_TOWUPPER_RANGE_3_LENGTH, d0g_towupper_range3},
	{D0G_TOWUPPER_RANGE_4_START, D0G_TOWUPPER_RANGE_4_LENGTH, d0g_towupper_range4},
	{D0G_TOWUPPER_RANGE_5_START, D0G_TOWUPPER_RANGE_5_LENGTH, d0g_towupper_range5},
	{D0G_TOWUPPER_RANGE_6_START, D0G_TOWUPPER_RANGE_6_LENGTH, d0g_towupper_range6},
	{D0G_TOWUPPER_RANGE_7_START, D0G_TOWUPPER_RANGE_7_LENGTH, d0g_towupper_range7},
	{D0G_TOWUPPER_RANGE_8_START, D0G_TOWUPPER_RANGE_8_LENGTH, d0g_towupper_range8},
	{D0G_TOWUPPER_RANGE_9_START, D0G_TOWUPPER_RANGE_9_LENGTH, d0g_towupper_range9},
};

wchar_t d0g_towlower(wchar_t c)
{
	if (!(c & 0xff80))
	{
		// Common characters
		if ((unsigned int)(c - L'A') < 26)
			return c | 0x20;
		return c;
	}
	int i = D0G_TOWLOWER_RANGES;
	const d0g_towlu_range *range = d0g_towlower_ranges;
	while (i--)
	{
		if ((unsigned int)(c - range->start) < range->length)
			return range->remap[c - range->start];
		++range;
	}
	return c;
}

wchar_t d0g_towupper(wchar_t c)
{
	if (!(c & 0xff80))
	{
		// Common characters
		if ((unsigned int)(c - L'a') < 26)
			return c & 0x5f;
		return c;
	}
	int i = D0G_TOWUPPER_RANGES;
	const d0g_towlu_range *range = d0g_towupper_ranges;
	while (i--)
	{
		if ((unsigned int)(c - range->start) < range->length)
			return range->remap[c - range->start];
		++range;
	}
	return c;
}